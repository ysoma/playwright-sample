# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: 宿泊予約の一連フローが完了する
- Location: C:\Users\ysoma\github\playwright-sample\tests\reservation.spec.ts:25:5

# Error details

```
Error: expect(received).toContain(expected) // indexOf

Expected substring: "お得な特典付きプラン"
Received string:    " "
    at C:\Users\ysoma\github\playwright-sample\tests\reservation.spec.ts:53:26
```

# Page snapshot

```yaml
- heading "Hotel Planisphere" [level=1]
- navigation:
  - list:
    - listitem:
      - link "ホーム"
    - listitem:
      - link "宿泊予約"
    - listitem:
      - link "会員登録"
    - listitem:
      - button "ログイン"
- heading "宿泊プラン一覧" [level=2]
- text: ⭐おすすめプラン⭐
- heading "お得な特典付きプラン" [level=5]
- list:
  - listitem: 大人1名7,000円
  - listitem: 1名様から
  - listitem: スタンダードツイン
- link "このプランで予約"
- text: 本日限り
- heading "素泊まり" [level=5]
- list:
  - listitem: 大人1名5,500円
  - listitem: 1名様から
  - listitem: シングル
- link "このプランで予約"
- heading "出張ビジネスプラン" [level=5]
- list:
  - listitem: 大人1名7,500円
  - listitem: 1名様から
  - listitem: シングル
- link "このプランで予約"
- heading "エステ・マッサージプラン" [level=5]
- list:
  - listitem: 大人1名9,000円
  - listitem: 1名様から
  - listitem: 部屋指定なし
- link "このプランで予約"
- heading "貸し切り露天風呂プラン" [level=5]
- list:
  - listitem: 大人1名9,000円
  - listitem: 1名様から
  - listitem: 部屋指定なし
- link "このプランで予約"
- heading "カップル限定プラン" [level=5]
- list:
  - listitem: 大人1名8,000円
  - listitem: 2名様から
  - listitem: プレミアムツイン
- link "このプランで予約"
- heading "テーマパーク優待プラン" [level=5]
- list:
  - listitem: 大人1名10,000円
  - listitem: 1名様から
  - listitem: 部屋指定なし
- link "このプランで予約"
- contentinfo:
  - list:
    - listitem:
      - link "GitHub"
  - paragraph: © 2020-2025 Takeshi Kishi
```

# Test source

```ts
   1 | /**
   2 |  * 宿泊予約の一連フローが完了するテスト
   3 |  * 1. プラン選択
   4 |  * 2. 予約フォーム入力
   5 |  * 3. 確認
   6 |  */
   7 |
   8 | import { test, expect, Page } from '@playwright/test';
   9 | import { PlansPage } from '../pages/plansPage';
  10 | import { ReservePage } from '../pages/reservePage';
  11 | import { ConfirmPage } from '../pages/confirmPage';
  12 | import { allure } from 'allure-playwright';
  13 |
  14 | const testData = {
  15 |     planName: 'お得な特典付きプラン',
  16 |     checkInDate: '2025/04/01',
  17 |     stayDays: '2',
  18 |     guests: '2',
  19 |     additionalPlans: ['朝食バイキング', 'お得な観光プラン'],
  20 |     guestName: 'テスト太郎',
  21 |     email: 'test@example.com',
  22 |     remarks: '静かな部屋を希望します'
  23 | };
  24 |
  25 | test('宿泊予約の一連フローが完了する', async ({ page }) => {
  26 |     allure.label('feature', '宿泊予約');
  27 |     allure.description('プラン選択から予約フォーム入力、確認、モーダル完了までのE2Eテスト');
  28 |
  29 |     const plansPage = new PlansPage(page);
  30 |     await plansPage.goto();
  31 |
  32 |     const popup: Page = await plansPage.selectPlanByName(testData.planName); // プラン選択
  33 |
  34 |     const reservePage = new ReservePage(popup);
  35 |     const confirmPage = new ConfirmPage(popup);
  36 |
  37 |     // testDataの入力
  38 |     await reservePage.selectDate(testData.checkInDate);
  39 |     await reservePage.selectStayDays(testData.stayDays);
  40 |     await reservePage.selectGuests(testData.guests);
  41 |     await reservePage.chooseAdditionalPlans(testData.additionalPlans);
  42 |     await reservePage.fillName(testData.guestName);
  43 |     await reservePage.selectContactMethod(testData.email ? 'email' : 'no');
  44 |     await reservePage.fillEmail(testData.email);
  45 |     await reservePage.fillRemarks(testData.remarks);
  46 |     await reservePage.proceedToConfirm();
  47 |
  48 |     // 確認画面に遷移したことを検証
  49 |     await expect(popup).toHaveURL(/.*\/confirm\.html/);
  50 |
  51 |     // 確認画面の内容を検証
  52 |     const planNameText = await confirmPage.getPlanNameText();
> 53 |     expect(planNameText).toContain(testData.planName);
     |                          ^ Error: expect(received).toContain(expected) // indexOf
  54 |     const guestNameText = await confirmPage.getGuestNameText();
  55 |     expect(guestNameText).toContain(testData.guestName);
  56 |     const emailText = await confirmPage.getContactText();
  57 |     expect(emailText).toContain(testData.email);
  58 |
  59 |     // 予約を確定
  60 |     await confirmPage.confirm();
  61 |
  62 |     // モーダルを検証
  63 |     await confirmPage.expectModalVisible();
  64 |     const modalText = await confirmPage.getModalText();
  65 |     expect(modalText).toContain('ご来館、心よりお待ちしております');
  66 | });
  67 |
  68 |
```