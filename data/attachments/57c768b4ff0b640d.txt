# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: 宿泊予約の一連フローが正常に完了すること
- Location: C:\Users\ysoma\github\playwright-sample\tests\reservation.spec.ts:34:5

# Error details

```
Error: expect(received).toContain(expected) // indexOf

Expected substring: "お得な特典付きプラン"
Received string:    " "
    at C:\Users\ysoma\github\playwright-sample\tests\reservation.spec.ts:63:31
```

# Test source

```ts
   1 | /**
   2 |  * 宿泊予約フローE2Eテスト
   3 |  * 
   4 |  * このテストでは、以下の一連のユーザーフローを検証します：
   5 |  * 1. プラン選択ページでの宿泊プラン選択
   6 |  * 2. 予約情報入力フォームの入力
   7 |  * 3. 予約内容確認
   8 |  * 4. 予約完了
   9 |  */
  10 |
  11 | import { test, expect, Page } from '@playwright/test';
  12 | import { PlansPage } from '../pages/plansPage';
  13 | import { ReservePage } from '../pages/reservePage';
  14 | import { ConfirmPage } from '../pages/confirmPage';
  15 | import { allure } from 'allure-playwright';
  16 |
  17 | // ----------------------------------------------------------------------------
  18 | // テスト用宿泊予約データ
  19 | // ----------------------------------------------------------------------------
  20 | const reservationTestData = {
  21 |     planName: 'お得な特典付きプラン',
  22 |     checkInDate: '2025/5/31',
  23 |     stayDays: '2',
  24 |     guests: '2',
  25 |     additionalPlans: ['朝食バイキング', 'お得な観光プラン'],
  26 |     guestName: 'テスト太郎',
  27 |     email: 'test@example.com',
  28 |     remarks: '静かな部屋を希望します'
  29 | };
  30 |
  31 | // ----------------------------------------------------------------------------
  32 | // テストケース
  33 | // ----------------------------------------------------------------------------
  34 | test('宿泊予約の一連フローが正常に完了すること', async ({ page }) => {
  35 |     // テストのメタデータを設定
  36 |     allure.label('feature', '宿泊予約');
  37 |     allure.description('プラン選択から予約入力、確認、完了までの一連のE2Eフロー検証');
  38 |     allure.severity('critical');
  39 |
  40 |     // GIVEN: プラン一覧ページにアクセスする
  41 |     const plansPage = new PlansPage(page);
  42 |     await plansPage.goto();
  43 |
  44 |     // WHEN: 特定のプランを選択する
  45 |     const reservationPage: Page = await plansPage.selectPlanByName(reservationTestData.planName);
  46 |
  47 |     // AND: 予約情報を入力する
  48 |     const reserveForm = new ReservePage(reservationPage);
  49 |     await reserveForm.fillReservationForm(reservationTestData);
  50 |
  51 |     // AND: 予約確認画面へ進む
  52 |     await reserveForm.proceedToConfirm();
  53 |
  54 |     // THEN: 確認画面に遷移し、入力した予約内容が正しく表示されている
  55 |     const confirmPage = new ConfirmPage(reservationPage);
  56 |     await expect(reservationPage).toHaveURL(/.*\/confirm\.html/);
  57 |
  58 |     // 予約内容の検証
  59 |     const displayedPlanName = await confirmPage.getPlanNameText();
  60 |     const displayedGuestName = await confirmPage.getGuestNameText();
  61 |     const displayedContact = await confirmPage.getContactText();
  62 |
> 63 |     expect(displayedPlanName).toContain(reservationTestData.planName);
     |                               ^ Error: expect(received).toContain(expected) // indexOf
  64 |     expect(displayedGuestName).toContain(reservationTestData.guestName);
  65 |     expect(displayedContact).toContain(reservationTestData.email);
  66 |
  67 |     // WHEN: 予約を確定する
  68 |     await confirmPage.confirm();
  69 |
  70 |     // THEN: 予約完了のモーダルが表示される
  71 |     await confirmPage.expectModalVisible();
  72 |
  73 |     // AND: モーダルに適切な予約完了メッセージが表示されている
  74 |     const completionMessage = await confirmPage.getModalText();
  75 |     expect(completionMessage).toContain('ご来館、心よりお待ちしております');
  76 | });
  77 |
  78 | // 将来的に追加すべきテストケース：
  79 | // - 必須項目が未入力の場合のバリデーション確認
  80 | // - 異なるプラン選択での予約フロー
  81 | // - 連絡方法を電話番号に設定した場合の予約フロー
```